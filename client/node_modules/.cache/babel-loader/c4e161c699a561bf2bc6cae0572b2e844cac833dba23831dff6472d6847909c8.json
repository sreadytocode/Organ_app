{"ast":null,"code":"var _jsxFileName = \"/Users/hamidqureshi/codeclan_work/Javascript_project/Organs_app/organ_app/client/src/Components/QuizContext/QuizContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useEffect, useReducer } from \"react\";\nimport { getOrgans, postOrgans } from '../OrgansService.js';\n// createContext global object can use in all components rather than props. Has parent and child\n// relationships.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction fetchQuiz() {\n  const quizData = \"\";\n  getOrgans().then(data => {\n    console.log(data['Brain']);\n  });\n}\nfetchQuiz();\nconst initialState = {};\n\n// This way will always get state and action assigned\nconst reducer = (state, action) => {\n  return state;\n};\n// QuizProvider is a component. Children is the application.\nexport const QuizProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  // Assigned a variable with hook useReducer. Inside value will have two things:\n  // 1. Global state can access throughout app\n  // 2. Our equivalent of useState.\n  const value = useReducer(reducer, initialState);\n  // For return of QuizContent.Provider component, inside should be stored the children\n  // which is the application. Then a value that has been assigned.\n  return /*#__PURE__*/_jsxDEV(QuizContent.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 12\n  }, this);\n};\n// QuizContent is content provider. \n_s(QuizProvider, \"HDl9A1duRDI+maTNi9v2R1p+EwQ=\");\n_c = QuizProvider;\nexport const QuizContent = /*#__PURE__*/createContext();\nvar _c;\n$RefreshReg$(_c, \"QuizProvider\");","map":{"version":3,"names":["createContext","useEffect","useReducer","getOrgans","postOrgans","fetchQuiz","quizData","then","data","console","log","initialState","reducer","state","action","QuizProvider","children","value","QuizContent"],"sources":["/Users/hamidqureshi/codeclan_work/Javascript_project/Organs_app/organ_app/client/src/Components/QuizContext/QuizContext.js"],"sourcesContent":["import { createContext, useEffect, useReducer } from \"react\";\nimport {getOrgans, postOrgans} from '../OrgansService.js'\n// createContext global object can use in all components rather than props. Has parent and child\n// relationships.\n\nfunction fetchQuiz() {\n    const quizData = \"\"\n    getOrgans()\n    .then((data) => {\n        console.log(data['Brain']);\n    })\n\n}\n\nfetchQuiz()\nconst initialState = {\n    \n};\n    \n\n// This way will always get state and action assigned\nconst reducer = (state, action) => {\n    return state;\n};\n// QuizProvider is a component. Children is the application.\nexport const QuizProvider = ({children}) => {\n    // Assigned a variable with hook useReducer. Inside value will have two things:\n    // 1. Global state can access throughout app\n    // 2. Our equivalent of useState.\n    const value = useReducer(reducer, initialState)\n    // For return of QuizContent.Provider component, inside should be stored the children\n    // which is the application. Then a value that has been assigned.\n    return <QuizContent.Provider value={value}>{children}</QuizContent.Provider>\n}\n// QuizContent is content provider. \nexport const QuizContent = createContext();"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAC5D,SAAQC,SAAS,EAAEC,UAAU,QAAO,qBAAqB;AACzD;AACA;AAAA;AAEA,SAASC,SAAS,GAAG;EACjB,MAAMC,QAAQ,GAAG,EAAE;EACnBH,SAAS,EAAE,CACVI,IAAI,CAAEC,IAAI,IAAK;IACZC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC,OAAO,CAAC,CAAC;EAC9B,CAAC,CAAC;AAEN;AAEAH,SAAS,EAAE;AACX,MAAMM,YAAY,GAAG,CAErB,CAAC;;AAGD;AACA,MAAMC,OAAO,GAAG,CAACC,KAAK,EAAEC,MAAM,KAAK;EAC/B,OAAOD,KAAK;AAChB,CAAC;AACD;AACA,OAAO,MAAME,YAAY,GAAG,QAAgB;EAAA;EAAA,IAAf;IAACC;EAAQ,CAAC;EACnC;EACA;EACA;EACA,MAAMC,KAAK,GAAGf,UAAU,CAACU,OAAO,EAAED,YAAY,CAAC;EAC/C;EACA;EACA,oBAAO,QAAC,WAAW,CAAC,QAAQ;IAAC,KAAK,EAAEM,KAAM;IAAA,UAAED;EAAQ;IAAA;IAAA;IAAA;EAAA,QAAwB;AAChF,CAAC;AACD;AAAA,GATaD,YAAY;AAAA,KAAZA,YAAY;AAUzB,OAAO,MAAMG,WAAW,gBAAGlB,aAAa,EAAE;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}